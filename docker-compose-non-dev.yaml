version: "3.9"

x-swiple-depends-on: &swiple-depends-on
  opensearch-node1:
    condition: service_healthy
  postgres:
    condition: service_healthy

x-aws-creds: &aws-creds
   AWS_CONFIG_FILE: $HOME/.aws/config
   AWS_SHARED_CREDENTIALS_FILE: $HOME/.aws/credentials

services:
  swiple_api:
    env_file: docker/.env
    environment:
      <<: *aws-creds
      PRODUCTION: true
    container_name: swiple_api
    image: swiple/swiple-api:main
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - $HOME/.aws:$HOME/.aws
      - $HOME/.config/gcloud:/root/.config/gcloud
      - $HOME\AppData\Roaming\gcloud:/root/.config/gcloud
    depends_on: *swiple-depends-on

  scheduler:
    env_file: docker/.env
    environment:
      <<: *aws-creds
      APP: SCHEDULER
      PRODUCTION: true
    container_name: scheduler
    image: swiple/swiple-api:main
    restart: unless-stopped
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8001"]
    ports:
      - "8001:8001"
    volumes:
      - $HOME/.aws:$HOME/.aws
      - $HOME/.config/gcloud:/root/.config/gcloud
      - $HOME\AppData\Roaming\gcloud:/root/.config/gcloud
    depends_on: *swiple-depends-on

  swiple_ui:
    container_name: swiple_ui
    image: swiple/swiple-ui:main
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      - "swiple_api"

  celery_worker:
    container_name: celery_worker
    env_file: docker/.env
    command: celery --app=app.worker.app.celery_app worker -l info -c 4 -Ofair --without-heartbeat --without-gossip --without-mingle --loglevel=warning
    image: swiple-api:latest
    volumes:
      - $PWD/backend/app/:/code/app/
      - $HOME/.aws:$HOME/.aws
    environment:
      <<: *aws-creds
    depends_on:
      - swiple_api

  setup:
    env_file: docker/.env
    container_name: setup
    image: swiple/swiple-api:main
    environment:
      PRODUCTION: true
    command: bash -c "
        export PYTHONPATH=$PYTHONPATH:/code
        && cd app
        && reindexer init-index
        && reindexer run
        && python3 /code/app/scripts/create_admin_user.py
        && python3 /code/app/sample_data/load_data.py
      "
    depends_on: *swiple-depends-on
  postgres:
    container_name: postgresql
    image: postgres:10.5
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    healthcheck:
      test: /usr/bin/pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}
      interval: 5s
      timeout: 10s
      retries: 10
    ports:
      - "5432:5432"
    volumes:
      - ./docker/postgres-data:/var/lib/postgresql/data
  opensearch-node1:
    image: opensearchproject/opensearch:2.3.0
    restart: unless-stopped
    container_name: opensearch-node1
    environment:
      - cluster.name=opensearch-cluster
      - node.name=opensearch-node1
      - bootstrap.memory_lock=true # along with the memlock settings below, disables swapping
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m" # minimum and maximum Java heap size, recommend setting both to 50% of system RAM
      - "discovery.type=single-node" # disables bootstrap checks that are enabled when network.host is set to a non-loopback address
      - "plugins.security.audit.type=internal_opensearch"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536 # maximum number of open files for the OpenSearch user, set to at least 65536 on modern systems
        hard: 65536
    volumes:
      - opensearch-data1:/usr/share/opensearch/data
    ports:
      - "9200:9200"
      - "9600:9600" # required for Performance Analyzer
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'curl -XGET https://localhost:9200/_cluster/health -u "admin:admin" --silent --insecure || exit 1',
        ]
      interval: 5s
      timeout: 30s
      retries: 10
  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:2.3.0
    container_name: opensearch-dashboards
    restart: unless-stopped
    ports:
      - "5601:5601"
    expose:
      - "5601"
    environment:
      - 'OPENSEARCH_HOSTS=["https://opensearch-node1:9200"]'

  redis:
    image: "redis:7.0.0-alpine"
    restart: unless-stopped
    container_name: redis
    command: redis-server
    ports:
      - "6379:6379"
    expose:
      - "6379"
    volumes:
      - ./docker/redis-data:/var/lib/redis
    environment:
      - REDIS_REPLICATION_MODE=master
volumes:
  opensearch-data1:
